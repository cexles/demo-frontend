/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../common';

export declare namespace TradingPlatform {
  export type OrderStruct = {
    userAddress: PromiseOrValue<string>;
    baseToken: PromiseOrValue<string>;
    targetToken: PromiseOrValue<string>;
    pairFee: PromiseOrValue<BigNumberish>;
    slippage: PromiseOrValue<BigNumberish>;
    baseAmount: PromiseOrValue<BigNumberish>;
    aimTargetTokenAmount: PromiseOrValue<BigNumberish>;
    minTargetTokenAmount: PromiseOrValue<BigNumberish>;
    expiration: PromiseOrValue<BigNumberish>;
    boundOrder: PromiseOrValue<BigNumberish>;
    action: PromiseOrValue<BigNumberish>;
    data: PromiseOrValue<BytesLike>;
  };

  export type OrderStructOutput = [
    string,
    string,
    string,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    string,
  ] & {
    userAddress: string;
    baseToken: string;
    targetToken: string;
    pairFee: number;
    slippage: number;
    baseAmount: BigNumber;
    aimTargetTokenAmount: BigNumber;
    minTargetTokenAmount: BigNumber;
    expiration: BigNumber;
    boundOrder: BigNumber;
    action: number;
    data: string;
  };

  export type OrderInfoStruct = {
    id: PromiseOrValue<BigNumberish>;
    order: TradingPlatform.OrderStruct;
    additionalInformation: PromiseOrValue<BigNumberish>;
    resultTokenOut: PromiseOrValue<BigNumberish>;
    status: PromiseOrValue<boolean>;
  };

  export type OrderInfoStructOutput = [
    BigNumber,
    TradingPlatform.OrderStructOutput,
    BigNumber,
    BigNumber,
    boolean,
  ] & {
    id: BigNumber;
    order: TradingPlatform.OrderStructOutput;
    additionalInformation: BigNumber;
    resultTokenOut: BigNumber;
    status: boolean;
  };
}

export interface TradingPlatformInterface extends utils.Interface {
  functions: {
    'ADMIN_ROLE()': FunctionFragment;
    'DEFAULT_ADMIN_ROLE()': FunctionFragment;
    'MAX_ITERATIONS()': FunctionFragment;
    'PRECISION()': FunctionFragment;
    'activeOrderId(uint256)': FunctionFragment;
    'activeOrdersIds(uint256,uint256)': FunctionFragment;
    'activeOrdersLength()': FunctionFragment;
    'addTokensToWhitelist(address[])': FunctionFragment;
    'boundOrders(uint256,uint256)': FunctionFragment;
    'calculateFee(uint256)': FunctionFragment;
    'cancelOrders(uint256[])': FunctionFragment;
    'checkOrder(uint256)': FunctionFragment;
    'checkUpkeep(bytes)': FunctionFragment;
    'createOrder((address,address,address,uint24,uint24,uint128,uint128,uint128,uint256,uint256,uint8,bytes))': FunctionFragment;
    'deposit(address,uint256)': FunctionFragment;
    'executeOrders(uint256[])': FunctionFragment;
    'getFeeRecipient()': FunctionFragment;
    'getOrderCounter()': FunctionFragment;
    'getOrdersInfo(uint256[])': FunctionFragment;
    'getProtocolFee()': FunctionFragment;
    'getResultTokenOut(uint256)': FunctionFragment;
    'getRoleAdmin(bytes32)': FunctionFragment;
    'getRoleMember(bytes32,uint256)': FunctionFragment;
    'getRoleMemberCount(bytes32)': FunctionFragment;
    'getSwapHelper()': FunctionFragment;
    'getTokenStatus(address)': FunctionFragment;
    'getUserBalance(address,address)': FunctionFragment;
    'getUserOrdersIds(address)': FunctionFragment;
    'getUserOrdersInfo(address)': FunctionFragment;
    'grantRole(bytes32,address)': FunctionFragment;
    'hasRole(bytes32,address)': FunctionFragment;
    'isActiveOrderExist(uint256)': FunctionFragment;
    'performUpkeep(bytes)': FunctionFragment;
    'removeTokensFromWhitelist(address[])': FunctionFragment;
    'renounceRole(bytes32,address)': FunctionFragment;
    'revokeRole(bytes32,address)': FunctionFragment;
    'setProtocolFee(uint32)': FunctionFragment;
    'shouldRebalance()': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'withdraw(address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'ADMIN_ROLE'
      | 'DEFAULT_ADMIN_ROLE'
      | 'MAX_ITERATIONS'
      | 'PRECISION'
      | 'activeOrderId'
      | 'activeOrdersIds'
      | 'activeOrdersLength'
      | 'addTokensToWhitelist'
      | 'boundOrders'
      | 'calculateFee'
      | 'cancelOrders'
      | 'checkOrder'
      | 'checkUpkeep'
      | 'createOrder'
      | 'deposit'
      | 'executeOrders'
      | 'getFeeRecipient'
      | 'getOrderCounter'
      | 'getOrdersInfo'
      | 'getProtocolFee'
      | 'getResultTokenOut'
      | 'getRoleAdmin'
      | 'getRoleMember'
      | 'getRoleMemberCount'
      | 'getSwapHelper'
      | 'getTokenStatus'
      | 'getUserBalance'
      | 'getUserOrdersIds'
      | 'getUserOrdersInfo'
      | 'grantRole'
      | 'hasRole'
      | 'isActiveOrderExist'
      | 'performUpkeep'
      | 'removeTokensFromWhitelist'
      | 'renounceRole'
      | 'revokeRole'
      | 'setProtocolFee'
      | 'shouldRebalance'
      | 'supportsInterface'
      | 'withdraw',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'ADMIN_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_ITERATIONS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'PRECISION', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'activeOrderId',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'activeOrdersIds',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'activeOrdersLength', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'addTokensToWhitelist',
    values: [PromiseOrValue<string>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'boundOrders',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'calculateFee',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'cancelOrders',
    values: [PromiseOrValue<BigNumberish>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'checkOrder',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'checkUpkeep', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: 'createOrder',
    values: [TradingPlatform.OrderStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'executeOrders',
    values: [PromiseOrValue<BigNumberish>[]],
  ): string;
  encodeFunctionData(functionFragment: 'getFeeRecipient', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getOrderCounter', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getOrdersInfo',
    values: [PromiseOrValue<BigNumberish>[]],
  ): string;
  encodeFunctionData(functionFragment: 'getProtocolFee', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getResultTokenOut',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getRoleAdmin', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: 'getRoleMember',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getRoleMemberCount',
    values: [PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: 'getSwapHelper', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getTokenStatus', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'getUserBalance',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getUserOrdersIds',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getUserOrdersInfo',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'grantRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'hasRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'isActiveOrderExist',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'performUpkeep',
    values: [PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(
    functionFragment: 'removeTokensFromWhitelist',
    values: [PromiseOrValue<string>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'revokeRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setProtocolFee',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'shouldRebalance', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;

  decodeFunctionResult(functionFragment: 'ADMIN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_ITERATIONS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'PRECISION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'activeOrderId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'activeOrdersIds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'activeOrdersLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addTokensToWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'boundOrders', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cancelOrders', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'checkOrder', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'checkUpkeep', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createOrder', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'executeOrders', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getFeeRecipient', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getOrderCounter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getOrdersInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getProtocolFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getResultTokenOut', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleMember', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleMemberCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSwapHelper', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTokenStatus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserOrdersIds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserOrdersInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isActiveOrderExist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'performUpkeep', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeTokensFromWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setProtocolFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'shouldRebalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'Deposited(address,address,uint256)': EventFragment;
    'OrderCanceled(uint256)': EventFragment;
    'OrderCreated(uint256,address)': EventFragment;
    'OrderExecuted(uint256,address)': EventFragment;
    'OrdersBounded(uint256,uint256)': EventFragment;
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment;
    'RoleGranted(bytes32,address,address)': EventFragment;
    'RoleRevoked(bytes32,address,address)': EventFragment;
    'TokenAdded(address)': EventFragment;
    'TokenRemoved(address)': EventFragment;
    'Withdrawed(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Deposited'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OrderCanceled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OrderCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OrderExecuted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OrdersBounded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokenAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokenRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdrawed'): EventFragment;
}

export interface DepositedEventObject {
  operator: string;
  token: string;
  amount: BigNumber;
}
export type DepositedEvent = TypedEvent<[string, string, BigNumber], DepositedEventObject>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export interface OrderCanceledEventObject {
  orderId: BigNumber;
}
export type OrderCanceledEvent = TypedEvent<[BigNumber], OrderCanceledEventObject>;

export type OrderCanceledEventFilter = TypedEventFilter<OrderCanceledEvent>;

export interface OrderCreatedEventObject {
  orderId: BigNumber;
  userAddress: string;
}
export type OrderCreatedEvent = TypedEvent<[BigNumber, string], OrderCreatedEventObject>;

export type OrderCreatedEventFilter = TypedEventFilter<OrderCreatedEvent>;

export interface OrderExecutedEventObject {
  orderId: BigNumber;
  validator: string;
}
export type OrderExecutedEvent = TypedEvent<[BigNumber, string], OrderExecutedEventObject>;

export type OrderExecutedEventFilter = TypedEventFilter<OrderExecutedEvent>;

export interface OrdersBoundedEventObject {
  leftOrderId: BigNumber;
  rightOrderId: BigNumber;
}
export type OrdersBoundedEvent = TypedEvent<[BigNumber, BigNumber], OrdersBoundedEventObject>;

export type OrdersBoundedEventFilter = TypedEventFilter<OrdersBoundedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<[string, string, string], RoleRevokedEventObject>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface TokenAddedEventObject {
  token: string;
}
export type TokenAddedEvent = TypedEvent<[string], TokenAddedEventObject>;

export type TokenAddedEventFilter = TypedEventFilter<TokenAddedEvent>;

export interface TokenRemovedEventObject {
  token: string;
}
export type TokenRemovedEvent = TypedEvent<[string], TokenRemovedEventObject>;

export type TokenRemovedEventFilter = TypedEventFilter<TokenRemovedEvent>;

export interface WithdrawedEventObject {
  operator: string;
  token: string;
  amount: BigNumber;
}
export type WithdrawedEvent = TypedEvent<[string, string, BigNumber], WithdrawedEventObject>;

export type WithdrawedEventFilter = TypedEventFilter<WithdrawedEvent>;

export interface TradingPlatform extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TradingPlatformInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MAX_ITERATIONS(overrides?: CallOverrides): Promise<[number]>;

    PRECISION(overrides?: CallOverrides): Promise<[number]>;

    activeOrderId(
      itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    activeOrdersIds(
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]] & { ordersIds: BigNumber[] }>;

    activeOrdersLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    addTokensToWhitelist(
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    boundOrders(
      leftOrderId: PromiseOrValue<BigNumberish>,
      rightOrderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    calculateFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    cancelOrders(
      ordersIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    checkOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    checkUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[boolean, string] & { upkeepNeeded: boolean; performData: string }>;

    createOrder(
      order: TradingPlatform.OrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    deposit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    executeOrders(
      ordersIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getFeeRecipient(overrides?: CallOverrides): Promise<[string]>;

    getOrderCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOrdersInfo(
      ordersIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<
      [TradingPlatform.OrderInfoStructOutput[]] & {
        orders: TradingPlatform.OrderInfoStructOutput[];
      }
    >;

    getProtocolFee(overrides?: CallOverrides): Promise<[number]>;

    getResultTokenOut(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getSwapHelper(overrides?: CallOverrides): Promise<[string]>;

    getTokenStatus(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    getUserBalance(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getUserOrdersIds(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]]>;

    getUserOrdersInfo(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[TradingPlatform.OrderInfoStructOutput[]]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    isActiveOrderExist(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    performUpkeep(
      performData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    removeTokensFromWhitelist(
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setProtocolFee(
      newProtocolFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    shouldRebalance(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    withdraw(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  MAX_ITERATIONS(overrides?: CallOverrides): Promise<number>;

  PRECISION(overrides?: CallOverrides): Promise<number>;

  activeOrderId(
    itemId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  activeOrdersIds(
    offset: PromiseOrValue<BigNumberish>,
    limit: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber[]>;

  activeOrdersLength(overrides?: CallOverrides): Promise<BigNumber>;

  addTokensToWhitelist(
    tokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  boundOrders(
    leftOrderId: PromiseOrValue<BigNumberish>,
    rightOrderId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  calculateFee(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  cancelOrders(
    ordersIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  checkOrder(orderId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

  checkUpkeep(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<[boolean, string] & { upkeepNeeded: boolean; performData: string }>;

  createOrder(
    order: TradingPlatform.OrderStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  deposit(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  executeOrders(
    ordersIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getFeeRecipient(overrides?: CallOverrides): Promise<string>;

  getOrderCounter(overrides?: CallOverrides): Promise<BigNumber>;

  getOrdersInfo(
    ordersIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides,
  ): Promise<TradingPlatform.OrderInfoStructOutput[]>;

  getProtocolFee(overrides?: CallOverrides): Promise<number>;

  getResultTokenOut(
    orderId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>;

  getRoleMemberCount(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getSwapHelper(overrides?: CallOverrides): Promise<string>;

  getTokenStatus(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  getUserBalance(
    user: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getUserOrdersIds(
    userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber[]>;

  getUserOrdersInfo(
    userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<TradingPlatform.OrderInfoStructOutput[]>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  isActiveOrderExist(
    orderId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  performUpkeep(
    performData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  removeTokensFromWhitelist(
    tokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setProtocolFee(
    newProtocolFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  shouldRebalance(overrides?: CallOverrides): Promise<BigNumber[]>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  withdraw(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    MAX_ITERATIONS(overrides?: CallOverrides): Promise<number>;

    PRECISION(overrides?: CallOverrides): Promise<number>;

    activeOrderId(
      itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    activeOrdersIds(
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    activeOrdersLength(overrides?: CallOverrides): Promise<BigNumber>;

    addTokensToWhitelist(
      tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    boundOrders(
      leftOrderId: PromiseOrValue<BigNumberish>,
      rightOrderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    calculateFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    cancelOrders(
      ordersIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    checkOrder(orderId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

    checkUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[boolean, string] & { upkeepNeeded: boolean; performData: string }>;

    createOrder(order: TradingPlatform.OrderStruct, overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    executeOrders(
      ordersIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<boolean>;

    getFeeRecipient(overrides?: CallOverrides): Promise<string>;

    getOrderCounter(overrides?: CallOverrides): Promise<BigNumber>;

    getOrdersInfo(
      ordersIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<TradingPlatform.OrderInfoStructOutput[]>;

    getProtocolFee(overrides?: CallOverrides): Promise<number>;

    getResultTokenOut(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getSwapHelper(overrides?: CallOverrides): Promise<string>;

    getTokenStatus(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    getUserBalance(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getUserOrdersIds(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    getUserOrdersInfo(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<TradingPlatform.OrderInfoStructOutput[]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isActiveOrderExist(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    performUpkeep(performData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;

    removeTokensFromWhitelist(
      tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setProtocolFee(
      newProtocolFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    shouldRebalance(overrides?: CallOverrides): Promise<BigNumber[]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    withdraw(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;
  };

  filters: {
    'Deposited(address,address,uint256)'(
      operator?: null,
      token?: null,
      amount?: null,
    ): DepositedEventFilter;
    Deposited(operator?: null, token?: null, amount?: null): DepositedEventFilter;

    'OrderCanceled(uint256)'(orderId?: null): OrderCanceledEventFilter;
    OrderCanceled(orderId?: null): OrderCanceledEventFilter;

    'OrderCreated(uint256,address)'(orderId?: null, userAddress?: null): OrderCreatedEventFilter;
    OrderCreated(orderId?: null, userAddress?: null): OrderCreatedEventFilter;

    'OrderExecuted(uint256,address)'(orderId?: null, validator?: null): OrderExecutedEventFilter;
    OrderExecuted(orderId?: null, validator?: null): OrderExecutedEventFilter;

    'OrdersBounded(uint256,uint256)'(
      leftOrderId?: null,
      rightOrderId?: null,
    ): OrdersBoundedEventFilter;
    OrdersBounded(leftOrderId?: null, rightOrderId?: null): OrdersBoundedEventFilter;

    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null,
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null,
    ): RoleAdminChangedEventFilter;

    'RoleGranted(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleGrantedEventFilter;

    'RoleRevoked(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleRevokedEventFilter;

    'TokenAdded(address)'(token?: null): TokenAddedEventFilter;
    TokenAdded(token?: null): TokenAddedEventFilter;

    'TokenRemoved(address)'(token?: null): TokenRemovedEventFilter;
    TokenRemoved(token?: null): TokenRemovedEventFilter;

    'Withdrawed(address,address,uint256)'(
      operator?: null,
      token?: null,
      amount?: null,
    ): WithdrawedEventFilter;
    Withdrawed(operator?: null, token?: null, amount?: null): WithdrawedEventFilter;
  };

  estimateGas: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_ITERATIONS(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    activeOrderId(
      itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    activeOrdersIds(
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    activeOrdersLength(overrides?: CallOverrides): Promise<BigNumber>;

    addTokensToWhitelist(
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    boundOrders(
      leftOrderId: PromiseOrValue<BigNumberish>,
      rightOrderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    calculateFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    cancelOrders(
      ordersIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    checkOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    checkUpkeep(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    createOrder(
      order: TradingPlatform.OrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    deposit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    executeOrders(
      ordersIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getFeeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    getOrderCounter(overrides?: CallOverrides): Promise<BigNumber>;

    getOrdersInfo(
      ordersIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getProtocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    getResultTokenOut(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getSwapHelper(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenStatus(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getUserBalance(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getUserOrdersIds(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getUserOrdersInfo(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isActiveOrderExist(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    performUpkeep(
      performData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    removeTokensFromWhitelist(
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setProtocolFee(
      newProtocolFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    shouldRebalance(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    withdraw(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_ITERATIONS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activeOrderId(
      itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    activeOrdersIds(
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    activeOrdersLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addTokensToWhitelist(
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    boundOrders(
      leftOrderId: PromiseOrValue<BigNumberish>,
      rightOrderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    calculateFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    cancelOrders(
      ordersIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    checkOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    checkUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    createOrder(
      order: TradingPlatform.OrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    deposit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    executeOrders(
      ordersIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getFeeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOrderCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOrdersInfo(
      ordersIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getProtocolFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getResultTokenOut(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getSwapHelper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenStatus(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getUserBalance(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getUserOrdersIds(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getUserOrdersInfo(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isActiveOrderExist(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    performUpkeep(
      performData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    removeTokensFromWhitelist(
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setProtocolFee(
      newProtocolFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    shouldRebalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    withdraw(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
