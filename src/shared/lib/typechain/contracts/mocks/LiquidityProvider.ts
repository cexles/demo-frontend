/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../common';

export interface LiquidityProviderInterface extends utils.Interface {
  functions: {
    'DAI()': FunctionFragment;
    'USDC()': FunctionFragment;
    'collectAllFees()': FunctionFragment;
    'decreaseLiquidity(uint128)': FunctionFragment;
    'deposits(uint256)': FunctionFragment;
    'getLiquidity(uint256)': FunctionFragment;
    'increaseLiquidityCurrentRange(uint256,uint256)': FunctionFragment;
    'mintNewPosition()': FunctionFragment;
    'mintNewPositionWithParams(address,address,uint256,uint256,uint24)': FunctionFragment;
    'nonfungiblePositionManager()': FunctionFragment;
    'onERC721Received(address,address,uint256,bytes)': FunctionFragment;
    'poolFee()': FunctionFragment;
    'tokenId()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'DAI'
      | 'USDC'
      | 'collectAllFees'
      | 'decreaseLiquidity'
      | 'deposits'
      | 'getLiquidity'
      | 'increaseLiquidityCurrentRange'
      | 'mintNewPosition'
      | 'mintNewPositionWithParams'
      | 'nonfungiblePositionManager'
      | 'onERC721Received'
      | 'poolFee'
      | 'tokenId',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'DAI', values?: undefined): string;
  encodeFunctionData(functionFragment: 'USDC', values?: undefined): string;
  encodeFunctionData(functionFragment: 'collectAllFees', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'decreaseLiquidity',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'deposits', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'getLiquidity',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'increaseLiquidityCurrentRange',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'mintNewPosition', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'mintNewPositionWithParams',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'nonfungiblePositionManager', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'onERC721Received',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'poolFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tokenId', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'DAI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'USDC', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collectAllFees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseLiquidityCurrentRange', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintNewPosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintNewPositionWithParams', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nonfungiblePositionManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'onERC721Received', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenId', data: BytesLike): Result;

  events: {};
}

export interface LiquidityProvider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LiquidityProviderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DAI(overrides?: CallOverrides): Promise<[string]>;

    USDC(overrides?: CallOverrides): Promise<[string]>;

    collectAllFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    decreaseLiquidity(
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    deposits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, string, string] & {
        owner: string;
        liquidity: BigNumber;
        token0: string;
        token1: string;
      }
    >;

    getLiquidity(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    increaseLiquidityCurrentRange(
      amountAdd0: PromiseOrValue<BigNumberish>,
      amountAdd1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    mintNewPosition(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    mintNewPositionWithParams(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      amount0ToMint: PromiseOrValue<BigNumberish>,
      amount1ToMint: PromiseOrValue<BigNumberish>,
      _poolFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    nonfungiblePositionManager(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      operator: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    poolFee(overrides?: CallOverrides): Promise<[number]>;

    tokenId(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  DAI(overrides?: CallOverrides): Promise<string>;

  USDC(overrides?: CallOverrides): Promise<string>;

  collectAllFees(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  decreaseLiquidity(
    liquidity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  deposits(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [string, BigNumber, string, string] & {
      owner: string;
      liquidity: BigNumber;
      token0: string;
      token1: string;
    }
  >;

  getLiquidity(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  increaseLiquidityCurrentRange(
    amountAdd0: PromiseOrValue<BigNumberish>,
    amountAdd1: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  mintNewPosition(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  mintNewPositionWithParams(
    token0: PromiseOrValue<string>,
    token1: PromiseOrValue<string>,
    amount0ToMint: PromiseOrValue<BigNumberish>,
    amount1ToMint: PromiseOrValue<BigNumberish>,
    _poolFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  nonfungiblePositionManager(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    operator: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  poolFee(overrides?: CallOverrides): Promise<number>;

  tokenId(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    DAI(overrides?: CallOverrides): Promise<string>;

    USDC(overrides?: CallOverrides): Promise<string>;

    collectAllFees(
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }>;

    decreaseLiquidity(
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }>;

    deposits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, string, string] & {
        owner: string;
        liquidity: BigNumber;
        token0: string;
        token1: string;
      }
    >;

    getLiquidity(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    increaseLiquidityCurrentRange(
      amountAdd0: PromiseOrValue<BigNumberish>,
      amountAdd1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    mintNewPosition(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        _tokenId: BigNumber;
        liquidity: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    mintNewPositionWithParams(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      amount0ToMint: PromiseOrValue<BigNumberish>,
      amount1ToMint: PromiseOrValue<BigNumberish>,
      _poolFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        _tokenId: BigNumber;
        liquidity: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    nonfungiblePositionManager(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      operator: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<string>;

    poolFee(overrides?: CallOverrides): Promise<number>;

    tokenId(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    DAI(overrides?: CallOverrides): Promise<BigNumber>;

    USDC(overrides?: CallOverrides): Promise<BigNumber>;

    collectAllFees(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    decreaseLiquidity(
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    deposits(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidity(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    increaseLiquidityCurrentRange(
      amountAdd0: PromiseOrValue<BigNumberish>,
      amountAdd1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    mintNewPosition(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    mintNewPositionWithParams(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      amount0ToMint: PromiseOrValue<BigNumberish>,
      amount1ToMint: PromiseOrValue<BigNumberish>,
      _poolFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    nonfungiblePositionManager(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      operator: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    poolFee(overrides?: CallOverrides): Promise<BigNumber>;

    tokenId(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DAI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectAllFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    decreaseLiquidity(
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    deposits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getLiquidity(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    increaseLiquidityCurrentRange(
      amountAdd0: PromiseOrValue<BigNumberish>,
      amountAdd1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    mintNewPosition(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    mintNewPositionWithParams(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      amount0ToMint: PromiseOrValue<BigNumberish>,
      amount1ToMint: PromiseOrValue<BigNumberish>,
      _poolFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    nonfungiblePositionManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      operator: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    poolFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenId(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
